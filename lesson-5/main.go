package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

func main() {
	// 1. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç ùëõ –ø–æ—Ç–æ–∫–æ–≤ –∏ –¥–æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Ö –≤—Å–µ—Ö
	fmt.Println(waitG(10))

	//  2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º—å—é—Ç–µ–∫—Å–∞ —Å –ø–æ–º–æ—â—å—é defer
	fmt.Println(mutex(10))

}

func waitG(n int) int {
	var sum int64
	wg := sync.WaitGroup{}
	wg.Add(n)
	for i := 1; i <= n; i++ {
		go func() {
			atomic.AddInt64(&sum, 1)
			wg.Done()
		}()
	}
	wg.Wait()
	return int(sum)
}

func mutex(n int) int {
	sum := 0
	mu := sync.Mutex{}
	wg := sync.WaitGroup{}
	wg.Add(n)
	for i := 1; i <= n; i++ {
		go func() {
			mu.Lock()
			defer mu.Unlock()
			sum++
			wg.Done()
		}()
	}
	wg.Wait()
	return sum
}
